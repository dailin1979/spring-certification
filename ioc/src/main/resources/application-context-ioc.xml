<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:jpa="http://www.springframework.org/schema/data/jpa"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:p="http://www.springframework.org/schema/p"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/jdbc
    https://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/beans
		https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa
		https://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx
		https://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/util
  http://www.springframework.org/schema/util/spring-util.xsd"

>
  <bean id="helloWorld" class="ioc.bean.HelloWorld">
    <property name="name" value="test"></property>
  </bean>
  <bean id="car" class="ioc.bean.Car" >
    <constructor-arg value="audi" index="1"></constructor-arg>
    <constructor-arg value="sh" index="0"></constructor-arg>
    <constructor-arg value="1000000"></constructor-arg>
  </bean>

  <bean id="car2" class="ioc.bean.Car">
    <constructor-arg type="java.lang.String">
      <value>bmw</value>
    </constructor-arg>
    <constructor-arg value="sh" type="java.lang.String"></constructor-arg>
    <constructor-arg value="300" type="java.lang.Double"></constructor-arg>
  </bean>

  <bean id="person01" class="ioc.bean.Person">
    <property name="name" value="testperson01"></property>
    <property name="age" value="35"></property>
<!--    可以通过property中的ref元素或者ref属性建立bean之间的引用关系-->
<!--    <property name="car" ref="car2"></property>-->

<!--    <property name="car">-->
<!--      <ref com.ld.bean="car"></ref>-->
<!--    </property>-->
<!--    bean的引用关系可以通过建立内部bean的方法建立, 内部bean不能被其他的bean引用-->
    <property name="car">
      <bean class="ioc.bean.Car">
        <constructor-arg value="audi"></constructor-arg>
        <constructor-arg value="beijing"></constructor-arg>
        <constructor-arg value="190.0" type="java.lang.Double"></constructor-arg>
      </bean>
    </property>
<!--   给级联属性赋值， 注意: 属性需要先初始化后才可以为级联属性赋值， 否则会有异常, 和Strut2不同,  -->
    <property name="car.maxSpeed" value="260.0"></property>
  </bean>

<!--  测试配置集合属性-->
  <bean id="company001" class="ioc.bean.Company">
    <property name="name" value="myCompany001"></property>
    <property name="address" value="xxxstr. 001"></property>
    <property name="cars">
<!--      通过list标签可以给List和数组赋值, 还有set和map标签-->
      <list>
        <ref bean="car"/>
        <ref bean="car2"/>
<!--        可以通过写内部bean，给集合里添加元素-->
        <bean name="car" class="ioc.bean.Car">
          <constructor-arg value="vw"></constructor-arg>
          <constructor-arg value="shengzheng"></constructor-arg>
          <constructor-arg value="180.0" type="java.lang.Double"></constructor-arg>
        </bean>
      </list>
    </property>
  </bean>
  <bean id="company002" class="ioc.bean.Company">
    <property name="name" value="myCompany002"></property>
    <property name="address" value="xxxstr. 002"></property>
    <property name="parkedCar">
      <!--  map标签, 使用entry子节点配置map类型的成员变量-->
      <map>
        <entry key="xxxstr. 001" value-ref="car"></entry>
        <entry key="xxxstr. 002" value-ref="car2"></entry>
      </map>
    </property>
  </bean>
<!--配置properties属性值-->
  <bean id="dataSource" class="ioc.bean.MyDataSource">
    <property name="properties">
<!--      可以使用props和prop子字节的配置Properties的属性赋值， Properties implements Map(interface)-->
      <props>
        <prop key="user">root</prop>
        <prop key="password">1234</prop>
        <prop key="jdbcUrl">jdbc:mysql:///test</prop>
        <prop key="driverClass">com.mysql.jdbc.Driver</prop>
      </props>
    </property>
  </bean>

<!--  配置单例的集合bean，此集合bean独立出来以供多个bean可以引用， 需要导入util命名空间-->
  <util:list id="cars">
    <ref bean="car"/>
    <ref bean="car2"/>
  </util:list>

  <bean id="company003" class="ioc.bean.Company">
    <property name="name" value="myCompany003"></property>
    <property name="address" value="xxxstr. 003"></property>
    <property name="cars" ref="cars">
    </property>
  </bean>

<!--  通过p namespace为bean的属性赋值, 需要先导入p namespace, 相比传统的方式更简洁-->
 <bean id="person02" class="ioc.bean.Person" p:age="30" p:name="sandra" p:car-ref="car"></bean>

<!--  自动装配 通过bean标签的autowire属性,
byName 根据setter风格的属性名字找bean装配，若有，则装配，若无，则null
byType 根据bean类型和当前属性的类型进行装配， 前提是此bean是singelton, 否则出错-->
  <bean id="address" class="ioc.bean.Address" p:city="shanghai" p:street="hangxing road 408">
  </bean>
<!--  mycars在上面装配过了-->

  <bean id="localResident01" class="ioc.bean.LocalResident" p:name="tom" autowire="byName" ></bean>



</beans>